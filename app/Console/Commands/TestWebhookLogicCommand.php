<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class TestWebhookLogicCommand extends Command
{
    protected $signature = 'telegram:test-webhook-logic';
    protected $description = 'Test webhook logic and command handling';

    public function handle()
    {
        $this->info('Testing webhook logic...');

        $testCases = [
            [
                'chat_id' => '123456789',
                'from_name' => 'TestUser',
                'text' => '/start',
                'description' => 'Test /start command'
            ],
            [
                'chat_id' => '987654321',
                'from_name' => 'AnotherUser',
                'text' => '/help',
                'description' => 'Test /help command'
            ],
            [
                'chat_id' => '555666777',
                'from_name' => 'NewUser',
                'text' => 'Hello world',
                'description' => 'Test regular message'
            ]
        ];

        foreach ($testCases as $testCase) {
            $this->line("\n--- Testing: {$testCase['description']} ---");
            $this->line("Chat ID: {$testCase['chat_id']}");
            $this->line("From: {$testCase['from_name']}");
            $this->line("Message: {$testCase['text']}");

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
            $this->simulateChatCreation($testCase['chat_id'], $testCase['from_name']);

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
            $response = $this->handleCommand($testCase['text'], $testCase['from_name']);
            $this->line("Response: {$response}");
        }

        $this->info('\nWebhook logic testing completed!');
    }

    private function simulateChatCreation($chatId, $name)
    {
        try {
            $chat = \App\Models\TelegraphChat::where('chat_id', $chatId)->first();

            if (!$chat) {
                $bot = \App\Models\TelegraphBot::first();

                if ($bot) {
                    \App\Models\TelegraphChat::create([
                        'chat_id' => $chatId,
                        'name' => $name,
                        'telegraph_bot_id' => $bot->id,
                    ]);

                    $this->info("‚úì Created new chat: {$name} ({$chatId})");
                } else {
                    $this->error("‚úó No bot found in database");
                }
            } else {
                $this->info("‚úì Chat already exists: {$name} ({$chatId})");
            }
        } catch (\Exception $e) {
            $this->error("‚úó Error creating chat: " . $e->getMessage());
        }
    }

    private function handleCommand($text, $fromName)
    {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        $command = strtolower(trim($text));

        switch ($command) {
            case '/start':
                return "üéâ –ü—Ä–∏–≤–µ—Ç, {$fromName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Hariton!\n\n" .
                       "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n" .
                       "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n" .
                       "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n\n" .
                       "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!";

            case '/help':
                return "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n" .
                       "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" .
                       "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" .
                       "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n" .
                       "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!";

            case '/info':
                return "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n" .
                       "ü§ñ –ò–º—è: Hariton Bot\n" .
                       "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Hariton\n" .
                       "üîß –í–µ—Ä—Å–∏—è: 1.0\n\n" .
                       "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Laravel + Telegraph";

            default:
                return "–ü—Ä–∏–≤–µ—Ç, {$fromName}! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {$text}\n\n" .
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
        }
    }
}
